const OpenAI = require("openai");
const Document = require("../models/Document");

const openai = new OpenAI({
  apiKey: process.env.OPENROUTER_API_KEY, // ta cl√© OpenRouter
  baseURL: "https://openrouter.ai/api/v1", // endpoint OpenRouter
});

// üß† Poser une question √† partir d‚Äôun document
const askQuestion = async (req, res) => {
  try {
    const { docId, question } = req.body;

    if (!docId || !question) {
      return res.status(400).json({ message: "docId et question sont requis." });
    }

    const doc = await Document.findById(docId);
    if (!doc) {
      return res.status(404).json({ message: "Document introuvable." });
    }

    const prompt = `R√©ponds √† la question suivante en te basant uniquement sur ce texte :
${doc.contenu}

Question : ${question}`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // mod√®le OpenRouter (rapide et puissant)
      messages: [{ role: "user", content: prompt }],
      max_tokens: 500,
    });

    res.status(200).json({
      answer: response.choices[0].message.content.trim(),
    });
  } catch (error) {
    console.error("Erreur IA :", error);

    if (error.code === "insufficient_quota" || error.status === 429) {
      return res
        .status(429)
        .json({ message: "Quota OpenAI d√©pass√©. Merci de r√©essayer plus tard." });
    }

    res.status(500).json({
      message: "Erreur serveur",
      error: error.message,
    });
  }
};

// üìù G√©n√©ration automatique de quiz √† partir d'un document
const generateQuiz = async (req, res) => {
  try {
    const { docId, nbQuestions } = req.body;

    if (!docId || !nbQuestions) {
      return res.status(400).json({ message: "docId et nbQuestions sont requis." });
    }

    const doc = await Document.findById(docId);
    if (!doc) {
      return res.status(404).json({ message: "Document introuvable." });
    }

    const prompt = `
Tu es un g√©n√©rateur de quiz. G√©n√®re exactement ${nbQuestions} questions √† choix multiples (QCM) bas√©es UNIQUEMENT sur le texte fourni ci-dessous.

R√àGLES IMPORTANTES :
1. R√©ponds UNIQUEMENT avec un tableau JSON valide, sans texte avant ou apr√®s
2. Chaque question doit avoir exactement 4 options
3. Une seule option doit √™tre correcte
4. Les questions doivent √™tre pertinentes et bas√©es sur le contenu du document
5. Varie la position de la r√©ponse correcte (ne mets pas toujours la r√©ponse correcte en premier)

FORMAT JSON STRICT (exemple) :
[
  {
    "question": "Quelle est la capitale de la France ?",
    "options": ["Berlin", "Madrid", "Paris", "Rome"],
    "correctAnswer": "Paris"
  }
]

Texte du document :
${doc.contenu}

G√©n√®re maintenant ${nbQuestions} questions au format JSON uniquement :`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: "Tu es un assistant qui r√©pond uniquement en JSON valide. Ne g√©n√®re jamais de texte en dehors du JSON." 
        },
        { 
          role: "user", 
          content: prompt 
        }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    });

    let quizData;
    const content = response.choices[0].message.content.trim();

    try {
      // Essai de parsing direct
      quizData = JSON.parse(content);
    } catch (parseError) {
      console.log("Tentative d'extraction du JSON depuis la r√©ponse...");
      
      // Cherche le JSON entre les balises de code markdown si pr√©sentes
      const codeBlockMatch = content.match(/```json\s*([\s\S]*?)\s*```/);
      if (codeBlockMatch) {
        quizData = JSON.parse(codeBlockMatch[1]);
      } else {
        // Cherche un tableau JSON dans le texte
        const jsonMatch = content.match(/\[\s*{[\s\S]*}\s*\]/);
        if (jsonMatch) {
          quizData = JSON.parse(jsonMatch[0]);
        } else {
          throw new Error("Impossible d'extraire le JSON de la r√©ponse");
        }
      }
    }

    // Validation du format
    if (!Array.isArray(quizData)) {
      throw new Error("Le quiz doit √™tre un tableau");
    }

    // Validation de chaque question
    quizData = quizData.map((q, index) => {
      if (!q.question || !q.options || !q.correctAnswer) {
        throw new Error(`Question ${index + 1} invalide : champs manquants`);
      }
      if (!Array.isArray(q.options) || q.options.length !== 4) {
        throw new Error(`Question ${index + 1} invalide : doit avoir exactement 4 options`);
      }
      if (!q.options.includes(q.correctAnswer)) {
        throw new Error(`Question ${index + 1} invalide : la r√©ponse correcte n'est pas dans les options`);
      }
      return {
        question: q.question.trim(),
        options: q.options.map(opt => opt.trim()),
        correctAnswer: q.correctAnswer.trim()
      };
    });

    console.log(`‚úÖ Quiz g√©n√©r√© avec succ√®s : ${quizData.length} questions`);
    res.status(200).json({ quiz: quizData });

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration quiz :", error);
    
    // Si c'est une erreur de quota
    if (error.code === "insufficient_quota" || error.status === 429) {
      return res
        .status(429)
        .json({ message: "Quota API d√©pass√©. Merci de r√©essayer plus tard." });
    }

    res.status(500).json({
      message: "Erreur lors de la g√©n√©ration du quiz",
      error: error.message,
      details: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
};

module.exports = {
  askQuestion,
  generateQuiz,
};
